import * as cdk from 'aws-cdk-lib';
import { Duration, Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as codecommit from "aws-cdk-lib/aws-codecommit";
import { CodePipeline, CodePipelineSource, ShellStep } from 'aws-cdk-lib/pipelines';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apig from 'aws-cdk-lib/aws-apigatewayv2';
import * as apigateway from 'aws-cdk-lib/aws-apigateway'
import * as path from 'path';
import { ApiKey, ApiKeySourceType } from 'aws-cdk-lib/aws-apigateway';
import * as resourcegroups from 'aws-cdk-lib/aws-resourcegroups';
import * as events from "aws-cdk-lib/aws-events";
import * as targets from "aws-cdk-lib/aws-events-targets";
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import { DockerImageAsset } from 'aws-cdk-lib/aws-ecr-assets';
import * as sqs from 'aws-cdk-lib/aws-sqs';

export class BasicConstructsStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // The code that defines your stack goes here

    // example resource
    const queue = new sqs.Queue(this, 'BasicConstructsQueue', {
      queueName:"CodeTest",
      visibilityTimeout: cdk.Duration.seconds(300)
    });
    const repo = codecommit.Repository.fromRepositoryName(this, "VBS-Cloud-InstancePool-Architecture", "VBS-Cloud-InstancePool-Architecture" );

    const pipeline = new CodePipeline(this, 'Pipeline', {
      pipelineName: 'basicInstancePoolPipeline',
      synth: new ShellStep('Synth', {
        // input: CodePipelineSource.gitHub('OWNER/REPO', 'main'),
        input: CodePipelineSource.codeCommit(repo,'master'),
        installCommands: ["npm install -g aws-cdk"],
        commands: ['npm ci', 'npm run build', 'npx cdk synth']
      })
    });

    

     
    const Function_vbs_system_monitor = new lambda.DockerImageFunction(this, 'Function_vbs_system_monitor',{
      functionName: 'Function_vbs_system_monitor2',
      code: lambda.DockerImageCode.fromImageAsset(path.join(__dirname, '../src/systemMonitor'), {
      cmd: [ "app.lambda_handler" ],
      }),
      timeout: Duration.seconds(900),
  });
    const Policy_vbs_system_monitor = new iam.PolicyStatement();
    Policy_vbs_system_monitor.addResources("*");
    Policy_vbs_system_monitor.addActions("*");
    Function_vbs_system_monitor.addToRolePolicy(Policy_vbs_system_monitor);

    const eventRule_vbs_system_monitor=new events.Rule(this, "monitorRule", {
      schedule:events.Schedule.expression("cron(0 2 * * ? *)")
    });

    eventRule_vbs_system_monitor.addTarget(
      new targets.LambdaFunction(Function_vbs_system_monitor, {
        event: events.RuleTargetInput.fromObject({ message: "Hello Lambda" }),
      })
    );

    targets.addLambdaPermission(eventRule_vbs_system_monitor, Function_vbs_system_monitor);

  }
}
